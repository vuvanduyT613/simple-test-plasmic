// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xoGoYnzcgCWsQgugY2n8Ua
// Component: qloBj6vjVMacFh
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: xoGoYnzcgCWsQgugY2n8Ua/projectcss
import * as sty from "./PlasmicMenuButton.module.css"; // plasmic-import: qloBj6vjVMacFh/css

import BarsIcon from "./icons/PlasmicIcon__Bars"; // plasmic-import: 0PzmjFKFVJDrXH/icon
import TimesIcon from "./icons/PlasmicIcon__Times"; // plasmic-import: SM-BCYYRmvToKP/icon

export type PlasmicMenuButton__VariantMembers = {
  expanded: "expanded";
};

export type PlasmicMenuButton__VariantsArgs = {
  expanded?: SingleBooleanChoiceArg<"expanded">;
};

type VariantPropType = keyof PlasmicMenuButton__VariantsArgs;
export const PlasmicMenuButton__VariantProps = new Array<VariantPropType>(
  "expanded"
);

export type PlasmicMenuButton__ArgsType = {
  href?: string | PageHref;
};

type ArgPropType = keyof PlasmicMenuButton__ArgsType;
export const PlasmicMenuButton__ArgProps = new Array<ArgPropType>("href");

export type PlasmicMenuButton__OverridesType = {
  root?: p.Flex<"div">;
  box?: p.Flex<"div">;
};

export interface DefaultMenuButtonProps {
  href?: string | PageHref;
  expanded?: SingleBooleanChoiceArg<"expanded">;
  className?: string;
}

function PlasmicMenuButton__RenderFunc(props: {
  variants: PlasmicMenuButton__VariantsArgs;
  args: PlasmicMenuButton__ArgsType;
  overrides: PlasmicMenuButton__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box, {
          [sty.box__expanded]: hasVariant(variants, "expanded", "expanded")
        })}
      >
        {(hasVariant(variants, "expanded", "expanded") ? false : true) ? (
          <BarsIcon
            className={classNames(defaultcss.all, sty.svg__m5NT2, {
              [sty.svg__expanded__m5NT2IJyqq]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(hasVariant(variants, "expanded", "expanded") ? true : false) ? (
          <TimesIcon
            className={classNames(defaultcss.all, sty.svg___47CeN, {
              [sty.svg__expanded___47CeNiJyqq]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
            role={"img"}
          />
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "box"],
  box: ["box"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  box: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicMenuButton__VariantsArgs;
  args?: PlasmicMenuButton__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicMenuButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicMenuButton__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuButton__ArgProps,
      internalVariantPropNames: PlasmicMenuButton__VariantProps
    });

    return PlasmicMenuButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuButton";
  } else {
    func.displayName = `PlasmicMenuButton.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuButton = Object.assign(
  // Top-level PlasmicMenuButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),

    // Metadata about props expected for PlasmicMenuButton
    internalVariantProps: PlasmicMenuButton__VariantProps,
    internalArgProps: PlasmicMenuButton__ArgProps
  }
);

export default PlasmicMenuButton;
/* prettier-ignore-end */
